<%
t_max_multiport_length = 15

t_trusted_nets = Array(@trusted_nets).flatten
t_allow_all = !t_trusted_nets.select{|x| x =~ /^any|nil|ALL$/ }.empty?
t_dports = Array(@dports).flatten.uniq.sort
t_all_dports = !t_dports.select{|x| x =~ /^any|nil|ALL$/ }.empty?

t_port_slices = scope.function_slice_array([t_dports,t_max_multiport_length,':'])

t_output_base = "-m state --state NEW"
if @l_protocol == 'tcp' then
  t_output_base = t_output_base += " -m tcp -p tcp"
else
  t_output_base = t_output_base += " -p udp"
end

t_output = []

if t_all_dports && t_allow_all then
  t_output << "#{t_output_base} -j ACCEPT"
elsif t_all_dports && !t_allow_all then
  t_trusted_nets.each do |n|
    t_output << "#{t_output_base} -s #{n} -j ACCEPT"
  end
elsif !t_all_dports && t_allow_all then
  t_port_slices.each do |t_slice|
    t_output << "#{t_output_base} -m multiport --dports #{t_slice.join(',')} -j ACCEPT"
  end
else
  t_trusted_nets.each do |n|
    t_port_slices.each do |t_slice|
      t_output << "#{t_output_base} -s #{n} -m multiport --dports #{t_slice.join(',')} -j ACCEPT"
    end
  end
end
-%>
<%= t_output.join("\n") %>
